<?php
/**
 * @copyright 2012 Future Publishing Ltd and Joseph Ray
 * @license   http://opensource.org/licenses/mit-license.php/ MIT
 */

namespace Future\Statsd;

/**
 * Test class for Client.
 * Generated by PHPUnit on 2012-08-09 at 15:11:44.
 *
 * @author    Joseph Ray <joseph.ray@futurenet.com>
 */
class ClientTest extends \PHPUnit_Framework_TestCase
{
    /**
     * Data provider for testTiming and testHistogram
     *
     * @return array
     */
    public function timingProvider()
    {
        return array(
            array(
                'hello',
                1234
            ),
            array(
                'foobar',
                12.459403
            )
        );
    }

    /**
     * @covers Future\Statsd\Client::send
     * @covers Future\Statsd\Client::__construct
     * @covers Future\Statsd\Client::timing
     * @dataProvider timingProvider
     *
     * @param string $stat The stat name
     * @param float  $time The time to log
     *
     * @return void
     */
    public function testTiming($stat, $time)
    {
        $connection = $this->getMock('\Future\Network\Connection', array('send'));
        $client     = new Client($connection, true, 'www.test.com.');
        $connection->expects($this->once())
            ->method('send')
            ->with($this->equalTo("www.test.com.$stat:$time|ms"));

        $client->timing($stat, $time);
    }

    /**
     * Data provider for testGuage
     *
     * @return array
     */
    public function guageProvider()
    {
        return array(
            array(
                'hello',
                1234
            ),
            array(
                'foobar',
                12.459403
            )
        );
    }

    /**
     * @covers Future\Statsd\Client::send
     * @covers Future\Statsd\Client::__construct
     * @covers Future\Statsd\Client::guage
     * @dataProvider guageProvider
     *
     * @param string $stat  The stat name
     * @param float  $value The time to log
     *
     * @return void
     */
    public function testGuage($stat, $value)
    {
        $connection = $this->getMock('\Future\Network\Connection', array('send'));
        $client     = new Client($connection, true, 'www.test.com.');
        $connection->expects($this->once())
            ->method('send')
            ->with($this->equalTo("www.test.com.$stat:$value|g"));

        $client->guage($stat, $value);
    }

    /**
     * Data provider for testIncrement
     *
     * @return array
     */
    public function incrementProvider()
    {
        return array(
            array('increment')
        );
    }

    /**
     * @covers Future\Statsd\Client::send
     * @covers Future\Statsd\Client::__construct
     * @covers Future\Statsd\Client::increment
     * @dataProvider incrementProvider
     *
     * @param string $stat Stat name
     *
     * @return void
     */
    public function testIncrement($stat)
    {
        $connection = $this->getMock('\Future\Network\Connection', array('send'));
        $client     = new Client($connection, true, 'www.test.com.');
        $connection->expects($this->once())
            ->method('send')
            ->with($this->equalTo("www.test.com.$stat:1|c"));

        $client->increment($stat);
    }

    /**
     * Data provider for testDecrement
     *
     * @return array
     */
    public function decrementProvider()
    {
        return array(
            array('decrement')
        );
    }

    /**
     * @covers Future\Statsd\Client::send
     * @covers Future\Statsd\Client::__construct
     * @covers Future\Statsd\Client::decrement
     * @dataProvider decrementProvider
     *
     * @param string $stat Stat name
     *
     * @return void
     */
    public function testDecrement($stat)
    {
        $connection = $this->getMock('\Future\Network\Connection', array('send'));
        $client     = new Client($connection, true, 'www.test.com.');
        $connection->expects($this->once())
            ->method('send')
            ->with($this->equalTo("www.test.com.$stat:-1|c"));

        $client->decrement($stat);
    }

    /**
     * Data provider for testUpdateStats
     *
     * @return array
     */
    public function updateStatsProvider()
    {
        return array(
            array(
                'foobar',
                1234
            ),
            array(
                'negative',
                -1234
            )
        );
    }

    /**
     * @covers Future\Statsd\Client::send
     * @covers Future\Statsd\Client::__construct
     * @covers Future\Statsd\Client::updateStats
     * @dataProvider updateStatsProvider
     *
     * @param string $stat  Stat name
     * @param int    $delta The delta to update the value with
     *
     * @return void
     */
    public function testUpdateStats($stat, $delta)
    {
        $connection = $this->getMock('\Future\Network\Connection', array('send'));
        $client     = new Client($connection, true, 'www.test.com.');
        $connection->expects($this->once())
            ->method('send')
            ->with($this->equalTo("www.test.com.$stat:$delta|c"));

        $client->updateStats($stat, $delta);
    }

    /**
     * @covers Future\Statsd\Client::send
     * @covers Future\Statsd\Client::__construct
     * @covers Future\Statsd\Client::increment
     */
    public function testDisabled()
    {
        $connection = $this->getMock('\Future\Network\Connection', array('send'));
        $client     = new Client($connection, false, 'www.test.com.');
        $connection->expects($this->never())
            ->method('send');

        $client->increment('neverCall');
    }
}